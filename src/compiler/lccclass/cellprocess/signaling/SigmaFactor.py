'''
E.coli sigma factors:

σ19 (FecI) - the ferric citrate sigma factor, regulates the fec gene for iron transport.
σ24 (RpoE) - the extracytoplasmic/extreme heat stress sigma factor.
σ28 (RpoF) - the flagellar sigma factor.
σ32 (RpoH) - the heat shock sigma factor, it is turned on when exposed to heat. (aka. HtpR)
σ38 (RpoS) - the starvation/stationary phase sigma factor.
σ54 (RpoN) - the nitrogen-limitation sigma factor.
σ70 (RpoD) - “housekeeping”
'''


def Write_CellProcess(Writer, Comp, ProGen, ProcessID):
    # Molecule indices for Molecular IDs

    ListOfSigmaFactorGenes = [
        'fecI',   # Sigma19: ferric citrate sigma factor, regulates the fec gene for iron transport.
        'rpoE',   # Sigma24: extracytoplasmic/extreme heat stress sigma factor.
        'fliA',   # Sigma28: flagellar sigma factor.
        'rpoH',   # Sigma32: heat shock sigma factor, it is turned on when exposed to heat. (aka. HtpR)
        'rpoS',   # Sigma38: starvation/stationary phase sigma factor.
        'rpoN',   # Sigma54: nitrogen-limitation sigma factor.
        'rpoD',  # Sigma70: house-keeping
    ]
    #
    # # The below indices are generated by CellState.py
    #
    # Idx_Sigma19 = Comp.Master.ID2Idx_Master[Comp.Master.Sym2ID_Gene2Protein_Master['fecI']]
    # Idx_Sigma24 = Comp.Master.ID2Idx_Master[Comp.Master.Sym2ID_Gene2Protein_Master['rpoE']]
    # Idx_Sigma28 = Comp.Master.ID2Idx_Master[Comp.Master.Sym2ID_Gene2Protein_Master['fliA']]
    # Idx_Sigma32 = Comp.Master.ID2Idx_Master[Comp.Master.Sym2ID_Gene2Protein_Master['rpoH']]
    # Idx_Sigma38 = Comp.Master.ID2Idx_Master[Comp.Master.Sym2ID_Gene2Protein_Master['rpoS']]
    # Idx_Sigma54 = Comp.Master.ID2Idx_Master[Comp.Master.Sym2ID_Gene2Protein_Master['rpoN']]
    # Idx_Sigma70 = Comp.Master.ID2Idx_Master[Comp.Master.Sym2ID_Gene2Protein_Master['rpoD']]
    #
    # Idx_SigmaFactors = [
    #     Idx_Sigma19,
    #     Idx_Sigma24,
    #     Idx_Sigma28,
    #     Idx_Sigma32,
    #     Idx_Sigma38,
    #     Idx_Sigma54,
    #     Idx_Sigma70,
    # ]
    #
    # NUniq_SigmaFactors = len(Idx_SigmaFactors)
    #
    #
    # for Idx_SigmaFactor in Idx_SigmaFactors:
    #     print(Comp.Master.Count_Master[Idx_SigmaFactor])


    # RNAP holoenzymes bound to sigma factors

    ListOfRNAPHoloenzymes = [
        'CPLX0-221',    # For Sigma19
        'RNAPE-CPLX',   # For Sigma24
        'CPLX0-222',    # For Sigma28
        'RNAP32-CPLX',  # For Sigma32
        'RNAPS-CPLX',   # For Sigma38
        'RNAP54-CPLX',  # For Sigma54
        'RNAP70-CPLX',  # For Sigma70
    ]

    # The below indices generated by CellState.py
    #
    # Idx_RNAP_Sigma19 = Comp.Master.ID2Idx_Master['CPLX0-221']
    # Idx_RNAP_Sigma24 = Comp.Master.ID2Idx_Master['RNAPE-CPLX']
    # Idx_RNAP_Sigma28 = Comp.Master.ID2Idx_Master['CPLX0-222']
    # Idx_RNAP_Sigma32 = Comp.Master.ID2Idx_Master['RNAP32-CPLX']
    # Idx_RNAP_Sigma38 = Comp.Master.ID2Idx_Master['RNAPS-CPLX']
    # Idx_RNAP_Sigma54 = Comp.Master.ID2Idx_Master['RNAP54-CPLX']
    # Idx_RNAP_Sigma70 = Comp.Master.ID2Idx_Master['RNAP70-CPLX']
    #
    # Idx_RNAP_HoloEnzymes = [
    #     Idx_RNAP_Sigma19,
    #     Idx_RNAP_Sigma24,
    #     Idx_RNAP_Sigma28,
    #     Idx_RNAP_Sigma32,
    #     Idx_RNAP_Sigma38,
    #     Idx_RNAP_Sigma54,
    #     Idx_RNAP_Sigma70,
    # ]
    #
    # NUniq_RNAPHoloenzymes = len(Idx_RNAP_HoloEnzymes)
    #
    # for Idx_RNAPHoloenzyme in ListOfRNAPHoloenzymes:
    #     print(Comp.Master.Count_Master[Idx_RNAPHoloenzyme])
    #
    # Idx_RNAP_CoreEnzyme = Comp.Master.ID2Idx_Master[Comp.Complex.Name2ID_Complexes['RNA polymerase, core enzyme']]

    Rate_SigmaFactorBindingToRNAP = 0.8
    Rate_RNAPCoreAvailableForBinding = 0.8

    with Writer.Statement("class F%s(FCellProcess):" % ProcessID):
        ProGen.Init_Common(Writer)

        with Writer.Function_("Init_ProcessSpecificVariables"):
            Writer.Variable_("self.Rate_SigmaFactorBindingToRNAP", 0)
            Writer.Variable_("self.Rate_RNAPCoreAvailableForBinding", 0)

            Writer.Comment__("For Summary")
            Writer.Variable_("self.Count_RNAP_CoreEnzymesAvailable", 0)
            Writer.Variable_("self.Count_RNAP_HoloEnzymesToForm", 0)
            Writer.BlankLine()

        with Writer.Function_("SetUp_ProcessSpecificVariables"):
            Writer.Variable_("self.Rate_SigmaFactorBindingToRNAP", Rate_SigmaFactorBindingToRNAP)
            Writer.Variable_("self.Rate_RNAPCoreAvailableForBinding", Rate_RNAPCoreAvailableForBinding)
            Writer.BlankLine()

        # Override the abstract method
        with Writer.Function_("ExecuteProcess"):
            Writer.Comment__("Determine counts of sigma factors and RNAP core enzymes to complex")
            Writer.Statement("Count_SigmaFactors = self.GetCounts_Rate(self.Cel.Idx_SigmaFactors, self.Rate_SigmaFactorBindingToRNAP)")
            Writer.Statement("Count_RNAP_CoreEnzymeToComplex = self.DetermineCountForRNAPCoreToComplex()")
            Writer.Overwrite("self.Count_RNAP_CoreEnzymesAvailable", "Count_RNAP_CoreEnzymeToComplex")
            Writer.BlankLine()

            Writer.Comment__("RNAP holoenzyme formation apart from general complexation process")
            Writer.Statement("Count_RNAP_HoloEnzymes_ToForm = self.DistributeCountsInRatio(Count_SigmaFactors, Count_RNAP_CoreEnzymeToComplex)")
            Writer.Overwrite("self.Count_RNAP_HoloEnzymesToForm", "Count_RNAP_HoloEnzymes_ToForm")
            Writer.BlankLine()

            Writer.Comment__("Update sigma factor and RNAP counts")
            Writer.ReduceSum("Count_RNAP_HoloEnzymes_ToForm_Total", "Count_RNAP_HoloEnzymes_ToForm")
            Writer.Statement("self.AddToDeltaCounts(self.Cel.Idx_SigmaFactors, -Count_RNAP_HoloEnzymes_ToForm)")
            Writer.Statement("self.AddToDeltaCounts(self.Cel.Idx_RNAP_CoreEnzyme, -Count_RNAP_HoloEnzymes_ToForm_Total)")
            Writer.Statement("self.AddToDeltaCounts(self.Cel.Idx_RNAP_HoloEnzymes, Count_RNAP_HoloEnzymes_ToForm)")
            Writer.BlankLine()

        with Writer.Function_("DetermineCountForRNAPCoreToComplex"):
            Writer.Statement("Count_RNAP_CoreEnzyme = self.GetCounts(self.Cel.Idx_RNAP_CoreEnzyme)")
            Writer.ConvToBin("Bin_RNAP_CoreEnzyme_Bound", "self.Cel.Len_RNAsNascent", ">", 0)
            Writer.ReduceSum("Count_RNAP_CoreEnzyme_Bound", "Bin_RNAP_CoreEnzyme_Bound")
            Writer.Subtract_("Count_RNAP_CoreEnzymeAvailable", "Count_RNAP_CoreEnzyme", "Count_RNAP_CoreEnzyme_Bound")
            Writer.Statement("Count_RNAP_CoreEnzymeToComplex = self.DetermineAmountFromRate(Count_RNAP_CoreEnzymeAvailable, self.Rate_RNAPCoreAvailableForBinding)")
            Writer.ReturnVar("Count_RNAP_CoreEnzymeToComplex")
            Writer.BlankLine()

        with Writer.Function_("ViewProcessSummary"):
            Writer.PrintStrg("===== %s ===== " % ProcessID)

            SigmaFactorGenes_Str = ''
            for SigmaFactorGene in ListOfSigmaFactorGenes:
                SigmaFactorGenes_Str += SigmaFactorGene

            Writer.Statement("Count_SigmaFactors = self.GetCounts(self.Cel.Idx_SigmaFactors)")
            Writer.PrintStVa("# of SigmaFactors (encoding genes: %s)" % SigmaFactorGenes_Str,
                             "Count_SigmaFactors")

            Writer.PrintStVa("# of RNAP core enzymes available",
                             "self.Count_RNAP_CoreEnzymesAvailable[0]")
            Writer.PrintStVa("# of newly formed RNAs holo enzymes",
                             "self.Count_RNAP_HoloEnzymesToForm")
            Writer.BlankLine()
